// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  // provider = "sqlite"
  url          = env("DATABASE_URL")
  provider     = "mysql"
  relationMode = "prisma"
}

model Item {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  title       String
  description String @default("")
  link        String @default("")
  image       String @default("")
  tags        Tag[]

  progress   Progress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId String   @unique

  mediaType   MediaType? @relation(fields: [mediaTypeId], references: [id])
  mediaTypeId Int?

  lists ItemsInLists[]

  @@index([createdById])
  @@index([mediaTypeId])
}

model Progress {
  id String @id @default(cuid())

  type         String @default("check")
  currentValue Float
  maxValue     Float

  Item Item?
}

model MediaType {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  name String

  Item Item[]
  Goal Goal[]

  @@index([createdById])
}

model List {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  title       String
  description String @default("")

  isSprint  Boolean   @default(false)
  startDate DateTime  @default(now())
  dueDate   DateTime?

  items ItemsInLists[]

  @@index([createdById])
}

model ItemsInLists {
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  assignedAt   DateTime @default(now())
  assignedBy   User     @relation(fields: [assignedById], references: [id])
  assignedById String

  @@id([itemId, listId])
  @@index([itemId])
  @@index([listId])
  @@index([assignedById])
}

model ItemTemplate {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  title       String
  description String @default("")
  link        String @default("")

  progressType String @default("check")

  @@index([createdById])
}

model Goal {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  dueDate     DateTime?
  description String    @default("")

  targetValue       Int
  targetMediaType   MediaType? @relation(fields: [targetMediaTypeId], references: [id])
  targetMediaTypeId Int?

  @@index([createdById])
  @@index([targetMediaTypeId])
}

model Tag {
  name String @unique

  Item   Item?   @relation(fields: [itemId], references: [id])
  itemId String?

  @@index([itemId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Item         Item[]
  List         List[]
  ItemsInLists ItemsInLists[]
  ItemTemplate ItemTemplate[]
  MediaType    MediaType[]
  Goal         Goal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
